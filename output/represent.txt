BÁO CÁO KỸ THUẬT HÀNG TUẦN
=======================
Thời gian: 08/07/2025 - 08/13/2025

TÓM TẮT ĐIỀU HÀNH:
Trong tuần này, chúng tôi đã hoàn thành một số nhiệm vụ quan trọng nhằm cải thiện độ chính xác của các mô hình nhận diện văn bản và tối ưu hóa quy trình xử lý tạm thời. Việc cải thiện độ chính xác của mô hình multi3_jpn từ 0% lên 92% cho các trường hợp long_comp và từ 19% lên 92% cho ký tự 「〃」 đã cho thấy sự tiến bộ rõ rệt trong khả năng nhận diện của hệ thống. Đồng thời, việc xóa các thư mục tạm thời không cần thiết giúp giảm thiểu dung lượng lưu trữ và cải thiện hiệu suất hệ thống.

CÁC NHIỆM VỤ ĐÃ HOÀN THÀNH:

NHIỆM VỤ 1: AIREAD_ARISE-4034【AIRead】位置合わせ機能の強化: tăng độ chính xác của alignment function
-------------------
Mô tả Vấn đề: Một số biểu mẫu bị lệch do lấy điểm đặc trưng từ ảnh đã tiền xử lý, trong khi template dùng ảnh gốc. Điều này làm ảnh hưởng đến tính chính xác của quá trình căn chỉnh và cần phải đảm bảo rằng input cũng là ảnh gốc. Ngoài ra, việc xuất các file debug không cần thiết gây lãng phí tài nguyên lưu trữ.

Quy trình Giải pháp:
▪ Vấn đề hiện tại: Việc sử dụng ảnh đã tiền xử lý làm giảm độ chính xác của quá trình căn chỉnh, tác động trực tiếp đến khả năng nhận diện văn bản của hệ thống.
▪ Chúng tôi đã sửa ảnh template thành ảnh trước khi tiền xử lý để đảm bảo rằng tính chính xác của alignment function được duy trì.
▪ Implementation chi tiết: Chúng tôi đã điều chỉnh hàm warp_affine trong MultiCharRecognitionManager.java để truyền src thay vì binary.
▪ Configuration changes: Chúng tôi đã sử dụng config IS_DEBUG để kiểm soát việc xuất file debug; khi IS_DEBUG = false, các ảnh debug sẽ không được xuất.
▪ Testing thực hiện: Đã thử nghiệm với ảnh template nghiêng và xoay để xác minh tính chính xác của quá trình căn chỉnh.
▪ Kết quả đo lường: Quá trình căn chỉnh hoạt động tốt với ảnh raw chưa qua tiền xử lý, đảm bảo tính chính xác cao.
▪ Quality control: Đảm bảo không có regression và hệ thống hoạt động ổn định khi không có file debug.

Kết quả: Quá trình căn chỉnh hoạt động tốt và không còn xuất các file debug không cần thiết.
Phân tích: Việc chuyển đổi từ ảnh đã tiền xử lý sang ảnh gốc giúp cải thiện độ chính xác của quá trình căn chỉnh, từ đó nâng cao khả năng nhận diện văn bản.
Nhận xét: Kết quả đạt được cho thấy sự ổn định và hiệu suất của hệ thống được cải thiện, giảm thiểu lãng phí tài nguyên.

NHIỆM VỤ 2: AIREAD_ARISE-4157 【multi3_jpn】Cải thiện độ chính xác mô hình multi3_jpn
-------------------
Mô tả Vấn đề: Mô hình multi3_jpn gặp khó khăn trong việc nhận diện các component dài và ký tự đặc biệt như 「〃」, dẫn đến việc đọc sai và không chính xác trong một số trường hợp, ảnh hưởng đến chất lượng đầu ra.

Quy trình Giải pháp:
▪ Vấn đề hiện tại: Các component dài (~70 ký tự/câu) và ký tự 「〃」 bị nhận diện sai, ảnh hưởng đến khả năng xử lý văn bản.
▪ Chúng tôi đã test riêng một số case components dài trên code PaddleOCRv5 và code dự án để xác định nguyên nhân.
▪ Implementation chi tiết: Đã xác định rằng preprocess() cũ với resize cố định và padding trắng gây ra lỗi cho multi3_jpn, làm vỡ nét ảnh dài và sai lệch trong dự đoán.
▪ Chúng tôi đã sửa lại phần resize trong hàm preprocess để ảnh dài được resize về chiều cao 48px cố định, còn chiều rộng giữ tỉ lệ ban đầu.
▪ Testing thực hiện: Đã thực hiện test với nhiều trường hợp khác nhau, bao gồm long_comp và các ký tự đặc biệt.
▪ Kết quả đo lường: Độ chính xác cải thiện đáng kể cho long_comp từ 0/100 lên 92/100, cho các ký tự chứa số từ 1/100 lên 99/100, và ký tự 「〃」 từ 19/100 lên 92/100.
▪ Quality control: Đảm bảo không có regression và hệ thống hoạt động ổn định với các test cases đã kiểm tra.

Kết quả: Độ chính xác của mô hình đã cải thiện rõ rệt với long_comp đạt 92%, ký tự chứa số 99% và ký tự 「〃」 đạt 92%.
Phân tích: Sự thay đổi này giúp cải thiện đáng kể khả năng nhận diện của mô hình, thể hiện rõ mối liên hệ giữa việc tối ưu hóa quy trình tiền xử lý và chất lượng đầu ra.
Nhận xét: Kết quả đạt được không chỉ cải thiện độ chính xác mà còn đảm bảo tính ổn định và hiệu suất của mô hình.

NHIỆM VỤ 3: AIREAD_ARISE-4149 【AIRead】Trong folder Temp của USERPROFILE còn tồn tại onnxruntime-java
-------------------
Mô tả Vấn đề: Mỗi lần chạy AIRead sẽ tạo ra một thư mục tạm thời trong %USERPROFILE%\AppData\Local\Temp với dung lượng khoảng 10MB. Nếu số lần chạy tăng lên, dung lượng lưu trữ sẽ bị chiếm dụng nhiều.

Quy trình Giải pháp:
▪ Vấn đề hiện tại: Việc giữ lại các thư mục tạm thời không cần thiết gây lãng phí không gian lưu trữ và có thể ảnh hưởng đến hiệu suất hệ thống.
▪ Chúng tôi đã thêm FileSystemUtil.java vào Core.src.main.java...Core.Utils để sử dụng trong MultiCharRecognitionManager.java nhằm xóa các file temp của onnxruntime.
▪ Implementation chi tiết: Việc xóa các folder onnxruntime đã được thực hiện mà không làm ảnh hưởng đến các tiến trình khác.
▪ Testing thực hiện: Đã xác minh rằng các folder onnxruntime còn lại trong folder temp sẽ được xóa ở lần chạy tiếp theo mà không gây cản trở cho quá trình suy luận.
▪ Kết quả đo lường: Đã xóa được các folder onnxruntime mà không làm ảnh hưởng đến các tiến trình khác, giữ lại khoảng 9MB trong temp.
▪ Quality control: Đảm bảo rằng không có vấn đề phát sinh và các tiến trình vẫn hoạt động ổn định.

Kết quả: Đã xóa được các folder onnxruntime không cần thiết, giúp giảm thiểu dung lượng lưu trữ.
Phân tích: Việc quản lý tốt các thư mục tạm thời không chỉ giúp tiết kiệm không gian lưu trữ mà còn cải thiện hiệu suất tổng thể của hệ thống.
Nhận xét: Kết quả đạt được cho thấy sự cải thiện trong quy trình quản lý tài nguyên, đảm bảo hệ thống hoạt động hiệu quả hơn.

CÔNG VIỆC SẮP TỚI:
Chúng tôi sẽ tiếp tục tối ưu hóa các quy trình tiền xử lý và nhận diện văn bản, đồng thời theo dõi và cải thiện hiệu suất của hệ thống để đáp ứng tốt hơn nhu cầu của khách hàng trong thời gian tới.